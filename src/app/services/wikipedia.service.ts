import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Injectable()
export class WikipediaService {
  private category_url = "https://en.wikipedia.org/w/api.php?action=query&origin=*&format=json&prop=categories&redirects&cllimit=max&clshow=!hidden&titles="
  private links_url = "https://en.wikipedia.org/w/api.php?action=query&origin=*&format=json&prop=links&pllimit=max&titles="

  constructor(private _http: HttpClient) {}

  /**
    * Obtains a set of categories relating to each item the Wikipedia api and returns an associated dictionary
    * @param {Array<string>} items an array of strings representing the items to fetch categories on
    * @return {Promise} a promise that resolves when successful and rejects when fails 
  */ 
  getCategories(items: Array<string>) {
    let maxItems = 50; // The maximum amount of items Wikipedia allows you to chain together

    return new Promise((resolve, reject) => {
      for (let i = 0; i < items.length; i += maxItems) {
        let listOfItems = this.createStringURL(items.slice(i, i + maxItems));
        this._http.get(this.category_url + listOfItems)
        .subscribe((res) => {
          let outputDict = {};
          for (const [key, value] of Object.entries(res['query']['pages'])) {
            outputDict[value['title']] = value['categories']; 
          }
          if (i + maxItems > items.length) {
            resolve(outputDict);
          }
        }, (err) => {
          reject(err);
        })
      }
    });
  }

  /**
    * Concatenates the array of strings inputted into a viable string to be appended onto an URL
    * @param {Array<string>} items an array of strings to be concatenated
    * @return {string} a string generated by the concatenation of the input  
  */   
  private createStringURL(items: Array<string>){
    let listOfItems = ""
    items.forEach(anItem => {
      listOfItems += anItem.replace(" ", "_") + "|"
    });
    return listOfItems.slice(0, -1);
  }

  /**
    * Obtains a set of links found on a Wikipedia page from the Wikipedia api
    * @param {string} title a string that will be searched for on Wikipedia to obtain a set of links on that specific page
    * @return {Promise} a promise that resolves with an array of links when successful and rejects when fails 
  */ 
  getLinks(title: string) {
    let outputArray = [];
    return new Promise((resolve, reject) => {
      this._http.get(this.links_url + title)
      .subscribe((res) => {
        let arrayOfLinks = res['query']['pages'][Object.keys(res['query']['pages'])[0]]['links'];
        if (arrayOfLinks == undefined) {
          reject("Page not found")
          return;
        };
        // Push any links that do not have 'disambiguation' to an output array
        arrayOfLinks.forEach(aLink => {
          if (!aLink.title.toLowerCase().includes("disambiguation")) outputArray.push(aLink.title);
        });
        resolve(outputArray);
      }, (err) => {
        reject(err);
      })
    });
  }
}
